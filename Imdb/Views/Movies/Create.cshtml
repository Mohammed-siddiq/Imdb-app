@model Imdb.ViewModels.NewMovieViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create</h2>


<form action="" method="post" enctype="multipart/form-data">

    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Movie</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @id = "name" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                @Html.HiddenFor(model=>model.PosterPath,new { @id="posterpath"})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Poster, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.Poster, new { @class = "form-control", type = "file", @id = "poster" })
            </div>
        </div>

        <div class="form-group" >
            <div id="imgpreview" class="img-thumbnail " style="display:none" >
                <img class="img-responsive" id="targetImg" />
                <div class="caption">
                    <a href="#" onclick="ClearPreview()"><i class="glyphicon glyphicon-trash"></i> </a>

                </div>
            </div>

        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Plot, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Plot,  new { @class = "form-control", @id = "plot",@rows=10 })
                @Html.ValidationMessageFor(model => model.Plot, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.YearOfRelease, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.YearOfRelease, new { htmlAttributes = new { @class = "form-control", @id = "yor" } })
                @Html.ValidationMessageFor(model => model.YearOfRelease, "", new { @class = "text-danger" })
            </div>
        </div>

        <!--
        <div class="form-group">
                @Html.LabelFor(model => model.Poster, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                     @Html.EditorFor(model => model.Poster, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Poster, "", new { @class = "text-danger" })
                </div>
            </div>
            -->
        <div class="form-group">
            @Html.LabelFor(model => model.Actors, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ListBoxFor(model => model.ActorsId, new MultiSelectList(Model.Actors, "Id", "Person.Name"), new { @class = "form-control", @id = "actors" })
                   
                 <button  class="btn btn-link" id="addactors" type="button" onclick="NewActor()">Add New Actor </button>  
                <br />
                @Html.ValidationMessageFor(model => model.ActorsId, "", new { @class = "text-danger" })


            </div>

          
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Producer, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Producer, new SelectList(Model.Producers, "Id", "Person.Name"),"Select Producer" ,new { @class = "form-control", @id = "producer" })
                @Html.ValidationMessageFor(model => model.Producer, "", new { @class = "text-danger" })
                <br />

                 <button class="btn btn-link" id="baddproducer" type="button" onclick="NewProducer()">Add New Producer</button>
                <br /><br />
                <label>Add ALL Actors From the API?</label>
                <input type="checkbox" id="addallactors" />
            
            </div>
           


        </div>
        
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" disabled="disabled" id="sub" />
                <input type="button" value="Create Actors and Producers." id="actorsandproducers" class="btn btn-default" />
            </div>
        </div>
    </div>
    </form>

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>


<div class="addprod" id="addnewproducer" style="display:none">
    
    <div class="form-horizontal">
        <h4> Add Producer </h4>

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Person.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Person.Name, new { htmlAttributes = new { @class = "form-control", @id = "newname" } })
                @Html.ValidationMessageFor(model => model.Person.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Person.Sex, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Person.Sex, new { htmlAttributes = new { @class = "form-control", @id = "newsex" } })
                @Html.ValidationMessageFor(model => model.Person.Sex, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Person.Dob, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Person.Dob, new { htmlAttributes = new { @class = "form-control", @id = "newdob" } })
                @Html.ValidationMessageFor(model => model.Person.Dob, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Person.Bio, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Person.Bio, new { @class = "form-control", @id = "newbio", @rows = 10 })
                @Html.ValidationMessageFor(model => model.Person.Bio, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" onclick="addnewproducer()" value="Create" id="NewProducer" class="btn btn-default" />
            </div>
        </div>
    </div>


</div>

<div class="addact" id="addnewactor1" style="display:none">
    <div class="form-horizontal">
        <h4> Add Actor </h4>

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Person.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Person.Name, new { htmlAttributes = new { @class = "form-control", @id = "a1newname" } })
                @Html.ValidationMessageFor(model => model.Person.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Person.Sex, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Person.Sex, new { htmlAttributes = new { @class = "form-control", @id = "a1newsex" } })
                @Html.ValidationMessageFor(model => model.Person.Sex, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Person.Dob, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Person.Dob, new { htmlAttributes = new { @class = "form-control", @id = "a1newdob" } })
                @Html.ValidationMessageFor(model => model.Person.Dob, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Person.Bio, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Person.Bio, new { @class = "form-control", @id = "a1newbio", @rows = 10 })
                @Html.ValidationMessageFor(model => model.Person.Bio, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" onclick="addnewactor1()" value="Create" id="NewActor1" class="btn btn-default" />
            </div>
        </div>
    </div>

</div>

<div id="addnewactor2" style="display:none">
    <div class="form-horizontal">
        <h4> Add Actor</h4>

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Person.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Person.Name, new { htmlAttributes = new { @class = "form-control", @id = "a2newname" } })
                @Html.ValidationMessageFor(model => model.Person.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Person.Sex, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Person.Sex, new { htmlAttributes = new { @class = "form-control", @id = "a2newsex" } })
                @Html.ValidationMessageFor(model => model.Person.Sex, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Person.Dob, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Person.Dob, new { htmlAttributes = new { @class = "form-control", @id = "a2newdob" } })
                @Html.ValidationMessageFor(model => model.Person.Dob, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Person.Bio, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Person.Bio, new { @class = "form-control", @id = "a2newbio", @rows = 10 })
                @Html.ValidationMessageFor(model => model.Person.Bio, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" onclick="addnewactor2()" value="Create" id="NewActor2" class="btn btn-default" />
            </div>
        </div>
    </div>


</div>

<div id="addnewactor3" style="display:none">
    <div class="form-horizontal">
        <h4> Add Actor</h4>

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Person.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Person.Name, new { htmlAttributes = new { @class = "form-control", @id = "a3newname" } })
                @Html.ValidationMessageFor(model => model.Person.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Person.Sex, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Person.Sex, new { htmlAttributes = new { @class = "form-control", @id = "a3newsex" } })
                @Html.ValidationMessageFor(model => model.Person.Sex, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Person.Dob, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Person.Dob, new { htmlAttributes = new { @class = "form-control", @id = "a3newdob" } })
                @Html.ValidationMessageFor(model => model.Person.Dob, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Person.Bio, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Person.Bio, new { @class = "form-control", @id = "a3newbio", @rows = 10 })
                @Html.ValidationMessageFor(model => model.Person.Bio, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" onclick="addnewactor3()" value="Create" id="NewActor3" class="btn btn-default" />
            </div>
        </div>
    </div>


</div>


    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")

        <script>
            var AddingActor = false;
            var AddingProducer = false;
            var image;
            var actorlist = new Array();
            $(document).ready(function () {

               

                setactor =function(value) {
                     $("#actors option:contains(" + value + ")").attr('selected', 'selected').change();

                  
                };


               $("#poster").change(function () {
                    var File = this.files;

                    if (File && File[0]) {
                        ReadImage(File[0]);
                    }


               });

               $("#actorsandproducers").click(function(){
                   if($("#addnewproducer").is(":visible"))
                         addnewproducer();
                   if($("#addnewactor1").is(":visible"))
                       addnewactor1();
                   if($("#addnewactor2").is(":visible"))
                       addnewactor2();
                   if($("#addnewactor3").is(":visible"))
                        addnewactor3();
                   $("#actorsandproducers").attr("disabled",true);
                   $("#sub").attr("disabled",false);
                 //  setactor(actorlist);

               });
               $("#addallactors").click(function () {
                   ch = $('#addallactors').is(':checked');
                   if (ch) {

                       bootbox.confirm("Are you sure you want to add all the actors?", function (result) {
                           if (result) {
                               @Model.AllActors = true;

                           }

                       });



                   }
                   else
                   {
                              @Model.AllActors = false;


                   }




               });

               $('#poster').click(function () {

                   	
                  
                       $("#actors").val("");
                   var input = $('#name').val()
                   var moviename = encodeURI(input)
                   $.ajax({
                       url: "/Movies/GetMovieDetails?MovieName=" + moviename,
                       method: "GET",
                       contentType: 'application/json',
                       dataType: 'json',
                       success: function(data) {
                           console.log(data);
                           FillForm(data);
                       },
                       error: function (request, status, error) {
                           alert(status + ", " + error);
                       }


                   });

                    
               });
            });

            formatdate = function (date) {
                var currentTime = new Date(parseInt(date));
                var month = currentTime.getMonth() + 1;
                var day = currentTime.getDate();
                var year = currentTime.getFullYear();
                var fdate = month + "/" + day + "/" + year
                return fdate;
            }

            var Existlist = function (name, list) {
                var selectObject = $(list);

                @*var actors = @Model.Actors;
                for (var i=0;i<@Model.Actors.Count;i++) 
                {
                    if(actors[i].Name.toLowerCase() === name.toLowerCase())
                }*@
       

                for (var i = 0, opts = document.getElementById(list).options; i < opts.length; ++i)
                {
                    name = name.toLowerCase();
                    act=opts[i].text.toLowerCase();
                    if (name === act) {

                        return true;

                    }

                
                }
                                   return false;
            }
            var FillForm = function(data)
            {
                //write code to check if the actor already exist before creating individual actors
                


                $("#name").val(data.Name);
                $("#plot").val(data.Plot);
                $("#yor").val(data.YearOfRealease);
                // $("#poster").val(data.Poster);
                $("#posterpath").val(data.Poster)


                var producer = data.Producer,
                    actlist = [];
                    actor1 = data.Actors[0],
                    actor2 = (data.Actors[1]),
                    actor3 = data.Actors[2];

                    if (actor1 && !Existlist(actor1.Name, "actors")) {
                    $("#addnewactor1").show();
                    $("#a1newname").val(actor1.Name);
                    $("#a1newsex").val(actor1.Sex);
                    $("#a1newbio").val(actor1.Bio);
                    $("#a1newdob").val(formatdate(actor1.Dob.substr(6)));

                }
                else if(actor1) {
                    setactor(actor1.Name);
                }
                if (actor2 && !Existlist(actor2.Name, "actors")) {
                    $("#addnewactor2").show();
                    $("#a2newname").val(actor2.Name);
                    $("#a2newsex").val(actor2.Sex);
                    $("#a2newbio").val(actor2.Bio);
                    $("#a2newdob").val(formatdate(actor2.Dob.substr(6)));

                }
                else if(actor2) {

                    setactor(actor2.Name);

                }
                if (actor3 && !Existlist(actor3.Name, "actors")) {
                    $("#addnewactor3").show();
                    $("#a3newname").val(actor3.Name);
                    $("#a3newsex").val(actor3.Sex);
                    $("#a3newbio").val(actor3.Bio);
                    $("#a3newdob").val(formatdate(actor3.Dob.substr(6)));
                }
                else if(actor3) {
                    
                    setactor(actor3.Name)
                

                }
                if (producer && !Existlist(producer.Name, "producer")) {
                    $("#addnewproducer").show();
                    $("#newname").val(producer.Name);
                    $("#newsex").val(producer.Sex);
                    $("#newbio").val(producer.Bio);
                    $("#newdob").val(formatdate(producer.Dob.substr(6)));

                }
                else if(producer) {
                    $("#producer option:contains(" + producer.Name + ")").attr('selected', 'selected').change();
                }



           }

            var NewProducer = function () {

                AddingProducer = true;
              //  $("#addnewproducer").load("@Url.Action("NewPerson","Movies")")
                $("#addnewproducer").show();
               // $(".addprod .form-horizontal h4").html("Producer");
                    $(window).scrollTop($('#addnewproducer').offset().top)


            }

            var NewActor=function () {

                AddingActor = true;
               // $("#addnewactor1").load("@Url.Action("NewPerson","Movies")")
                $("#addnewactor1").show();
                $(window).scrollTop($('#addnewactor1').offset().top)
                //$(".addact .form-horizontal h4").html("Actor");
               }


            var ClearPreview = function () {
                $("#poster").val('');
                $("#imgpreview").hide();
            };



            var ReadImage = function (file) {
                var reader = new FileReader;
                image = new Image;

                reader.readAsDataURL(file);
                reader.onload = function (_file) {
                    image.src = _file.target.result;
                    image.onload = function () {
                        var height = this.height;
                        var width = this.width;
                        var type = file.type;
                        var size = ~~(file.size / 1024) + "KB";

                        $("#targetImg").attr('src', _file.target.result);
                        $("#imgpreview").show();

                    }

                };
            };
            var addnewactor1=function(){

                addnewactor(1);
            }
            var addnewactor2 = function () {
                addnewactor(2);

            }
            var addnewactor3 = function () {
                addnewactor(3);

            }

            var addnewactor = function (id) {

                nameid = "#a" + id + "newname";
                sexid = "#a" + id + "newsex";
                bioid = "#a" + id + "newbio";
                dobid = "#a" + id + "newdob";
                var person = {
                    name: $(nameid).val(),
                    sex: $(sexid).val(),
                    bio: $(bioid).val(),
                    dob: $(dobid).val()
                };
                $.ajax({
                    url: "/Actors/AddActor",
                    method: "POST",
                    data: person,
                    success: function (data) {
                       // alert("Actor added");
                        divid = "#addnewactor" + id;
                        $(divid).hide();
                        console.log(data.Id);
                        console.log(data.Person);
                        var o = new Option(person.name, data.Id);
                        $(o).html(person.name);
                        $("#actors").append(o);
                        //$("#actors option[value='"+data.Id+"']").prop('selected',true);
                        //actorlist.concat(data.Person.Name)
                        setactor(person.name); 
                    },

                    error: function (request, status, error) {
                        alert(status + ", " + error);


                    }

                });
            }
            var addnewproducer = function () {
                var person = {
                    name: $("#newname").val(),
                    sex: $("#newsex").val(),
                    bio: $("#newbio").val(),
                    dob: $("#newdob").val()
                };
                $.ajax({
                    url: "/Producers/AddProducer",
                    method: "POST",
                    data: person,
                    success: function (data) {
                      //  alert("Producer added");
                        $("#addnewproducer").hide();
                        console.log(data.Id);
                        console.log(data.Person);
                        var o = new Option(person.name, data.Id);
                        $(o).html(person.name);
                        $("#producer").append(o);
                        $("#producer").val(data.Id);

                    },

                    error: function (request, status, error) {
                        alert(status + ", " + error);


                    }

                });
            }

        </script>


    }
